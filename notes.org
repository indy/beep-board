

launch the emulator with:
ant emu

start adb:
adb start-server

then play around with:
ant install

* tasks [0/2]
  1. [ ] basic app navigation code
  2. [ ] sound

* audio

** midi values

   | note | octave | midi value |
   |------+--------+------------|
   | c    |      4 |         60 |
   | d    |      4 |         62 |
   | e    |      4 |         64 |
   | g    |      4 |         67 |
   | a    |      4 |         69 |
   | c    |      5 |         72 |
   | d    |      5 |         74 |
   | e    |      5 |         76 |

http://tomscarff.110mb.com/midi_analyser/midi_note_numbers_for_octaves.htm

** SoundPool

** MediaPlayer

MediaPlayer is designed for longer sound files or streams, this is
best suited for music files or larger files. The files will be loaded
from disk each time create is called, this will save on memory space
but introduce a small delay (not really noticeable).
http://www.stealthcopter.com/blog/2010/08/android-soundpool-vs-mediaplayer-focus-on-soundboards-and-memory-problems/


   I currently settled for the dynamic generation of midi files that
   then are fed to the MediaPlayer. It's quite easy to build a simple
   midi file generator and the MediaPlayer works correctly with it.
   http://stackoverflow.com/questions/2625407/dynamic-midi-generation-and-playback-on-android-possible


by rbgrn Â» Sun Oct 12, 2008 5:27 pm
Even if they haven't readied it for public use, it's the only suitable
API for sound in games. I looked into using MediaPlayers but if you
have more than a couple of sounds and you need to be able to play the
same sound a few times concurrently, it's just not a feasible
solution. 
http://www.anddev.org/using_soundpool_instead_of_mediaplayer-t3115.html


** JetPlayer

** AudioTrack

* setting up project after checking it out with git

  create a local.properties file in the project's root with the
  following content:

# This file is automatically generated by Android Tools.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file must *NOT* be checked in Version Control Systems,
# as it contains information specific to your local configuration.

# location of the SDK. This is only used by Ant
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=/home/indy/code/android/android-sdk-linux_x86


* creation command
  android create project \
                 --target 2 \
                 --name BeepBoard \
                 --path ./BeepBoard \
                 --activity BeepBoard \
                 --package io.indy.beepboard
